/*
  The Command Pattern involves three components: Command, Receiver, and Invoker.
  The Receiver performs the actual work,
  the Command specifies the Receiver and stores the parameters,
  and the Invoker triggers the Command.
  A real-world analogy could be a remote control for a television üì∫üéÆ;
  pressing a button (Invoker) triggers a specific action (Command) to change the channel or volume (Receiver).

  –®–∞–±–ª–æ–Ω –∫–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–∏–µ–º–Ω–∏–∫ –∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç.
  –ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É,
  –ö–æ–º–∞–Ω–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –ü–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã,
  –∞ –í—ã–∑–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ö–æ–º–∞–Ω–¥—É.
  –†–µ–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–æ–≥–∏–µ–π –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É–ª—å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º üì∫üéÆ;
  –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (Invoker) –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (Command) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (Receiver).
 */

interface IBaseCommand {
  execute(): void;

  undo(): void;
}

abstract class AbstractCommand implements IBaseCommand {
  protected constructor(protected readonly _editor: TextEditorReceiver) {
  }

  public undo(): void {
    this._editor.reset();
  }


  public abstract execute(): void;
}

class ConcreteBoldCommand extends AbstractCommand {
  constructor(_editor: TextEditorReceiver) {
    super(_editor);
  }

  public execute(): void {
    this._editor.makeBold();
  }

  public undo(): void {
    this._editor.removeBold();
  }
}

class ConcreteItalicCommand extends AbstractCommand {
  constructor(_editor: TextEditorReceiver) {
    super(_editor);
  }

  public execute(): void {
    this._editor.makeItalic();
  }

  public undo(): void {
    this._editor.removeItalic();
  }
}


class TextEditorReceiver {
  private readonly _initialState: string;

  constructor(private _textContent: string = '') {
    this._initialState = _textContent;
  }

  public reset(): void {
    this._textContent = this._initialState;
  }

  public makeBold(): void {
    this._textContent = `<b>${this._textContent}</b>`;
  }

  public removeBold(): void {
    this._textContent = this._textContent.replace(/<b>(.*?)<\/b>/g, '$1');
  }

  public makeItalic(): void {
    this._textContent = `<i>${this._textContent}</i>`;
  }

  public removeItalic(): void {
    this._textContent = this._textContent.replace(/<i>(.*?)<\/i>/g, '$1');
  }

  getText(): string {
    return this._textContent;
  }
}

class CommandInvoker {
  private _commandHistory: Array<IBaseCommand> = [];

  public applyCommand(command: IBaseCommand): void {
    command.execute();
    this._commandHistory.push(command);
  }

  public undo(): void {
    if (this._commandHistory.length === 0) return;

    const lastCommand = this._commandHistory.pop();
    lastCommand?.undo();
  }
}



const editor = new TextEditorReceiver('abc');
const invoker = new CommandInvoker;

invoker.applyCommand( new ConcreteBoldCommand(editor));
console.log(editor.getText());

invoker.applyCommand(new ConcreteItalicCommand(editor));
console.log(editor.getText());

invoker.undo();
console.log(editor.getText());

invoker.undo();
console.log(editor.getText());
